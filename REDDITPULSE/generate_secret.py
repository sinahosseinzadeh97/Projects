#!/usr/bin/env python3
"""
Generate a random secret key for Flask application
by SinaMohammadHosseinZadeh
"""

import os
import random
import string


def generate_secret_key(length=32):
    """Generate a secure random string for use as a secret key."""
    chars = string.ascii_letters + string.digits + '!@#$%^&*()-_=+[]{}|;:,.<>?'
    return ''.join(random.choice(chars) for _ in range(length))


def update_env_file(env_file='.env', new_env_file=False):
    """Update or create .env file with a new SESSION_SECRET."""
    # Generate a new secret key
    secret_key = generate_secret_key()
    
    # Determine if file exists and what operation to perform
    if not os.path.exists(env_file):
        with open(env_file, 'w') as f:
            f.write(f"# Reddit Automation Tool Environment\n")
            f.write(f"# Generated by SinaMohammadHosseinZadeh\n\n")
            f.write(f"SESSION_SECRET={secret_key}\n")
        print(f"Created new {env_file} with SESSION_SECRET")
        return
    
    # Read the existing .env file
    with open(env_file, 'r') as f:
        lines = f.readlines()
    
    # Check if SESSION_SECRET already exists
    session_secret_exists = False
    for i, line in enumerate(lines):
        if line.startswith('SESSION_SECRET='):
            session_secret_exists = True
            if new_env_file:
                lines[i] = f"SESSION_SECRET={secret_key}\n"
                print(f"Updated SESSION_SECRET in {env_file}")
            else:
                print(f"SESSION_SECRET already exists in {env_file}. Use --force to overwrite.")
            break
    
    # If SESSION_SECRET doesn't exist, append it
    if not session_secret_exists:
        lines.append(f"\n# Security key generated on {os.path.basename(__file__)}\n")
        lines.append(f"SESSION_SECRET={secret_key}\n")
        print(f"Added SESSION_SECRET to {env_file}")
    
    # Write back the updated contents
    with open(env_file, 'w') as f:
        f.writelines(lines)


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Generate a secure secret key for Flask applications")
    parser.add_argument("--env-file", default=".env", help="Path to .env file (default: .env)")
    parser.add_argument("--force", action="store_true", help="Force overwrite if SESSION_SECRET already exists")
    parser.add_argument("--length", type=int, default=32, help="Length of the secret key (default: 32)")
    
    args = parser.parse_args()
    
    # Generate and update the .env file
    update_env_file(args.env_file, args.force)
    
    print("\nSecret key generation complete!")
    print("Created by: SinaMohammadHosseinZadeh")